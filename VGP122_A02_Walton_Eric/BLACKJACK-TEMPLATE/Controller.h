#pragma once

#include "ControllerEvent.h"

class Controller
{
	friend class ControllerInputHandler;

public:
	enum CONTROLLER_BUTTON_STATE
	{
		INVALID = SDL_CONTROLLER_BUTTON_INVALID,
		A = SDL_CONTROLLER_BUTTON_A,
		B = SDL_CONTROLLER_BUTTON_B,
		X = SDL_CONTROLLER_BUTTON_X,
		Y = SDL_CONTROLLER_BUTTON_Y,
		BACK = SDL_CONTROLLER_BUTTON_BACK,
		GUIDE = SDL_CONTROLLER_BUTTON_GUIDE,
		START = SDL_CONTROLLER_BUTTON_START,
		LEFTSTICK = SDL_CONTROLLER_BUTTON_LEFTSTICK,
		RIGHTSTICK = SDL_CONTROLLER_BUTTON_RIGHTSTICK,
		LEFTSHOULDER = SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
		RIGHTSHOULDER = SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
		DPADUP = SDL_CONTROLLER_BUTTON_DPAD_UP,
		DPADDOWN = SDL_CONTROLLER_BUTTON_DPAD_DOWN,
		DPADLEFT = SDL_CONTROLLER_BUTTON_DPAD_LEFT,
		DPADRIGHT = SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
		MISC1 = SDL_CONTROLLER_BUTTON_MISC1,
		PADDLE1 = SDL_CONTROLLER_BUTTON_PADDLE1,
		PADDLE2 = SDL_CONTROLLER_BUTTON_PADDLE2,
		PADDLE3 = SDL_CONTROLLER_BUTTON_PADDLE3,
		PADDLE4 = SDL_CONTROLLER_BUTTON_PADDLE4,
		TOUCHPAD = SDL_CONTROLLER_BUTTON_TOUCHPAD,
		MAX = SDL_CONTROLLER_BUTTON_MAX
	};

	enum CONTROLLER_AXIS_STATE
	{
		LEFTX = 0,
		LEFTY = 1,
		RIGHTX = 2,
		RIGHTY = 3,
		TRIGGERLEFT = 4,
		TRIGGERRIGHT = 5
	};

	Controller(SDL_JoystickID id);
	~Controller();

	void enableSensors();

	void updateAxisMotion(ControllerEvent& e);

	static const int JOYSTICK_DEADZONE;

private:
	SDL_JoystickID id;
	SDL_Joystick* joystick;
	SDL_GameController* controller;
};